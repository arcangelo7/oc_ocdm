#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (c) 2016, Silvio Peroni <essepuntato@gmail.com>
#
# Permission to use, copy, modify, and/or distribute this software for any purpose
# with or without fee is hereby granted, provided that the above copyright notice
# and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT,
# OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
# DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
# ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
# SOFTWARE.
from __future__ import annotations

from typing import TYPE_CHECKING
from typing import Union

from rdflib import URIRef, RDF

if TYPE_CHECKING:
    from oc_ocdm.entities.bibliographic import ReferencePointer
    from oc_ocdm.entities.bibliographic import PointerList
from oc_ocdm import GraphEntity
from oc_ocdm.entities import BibliographicEntity

"""
Notes about DE:

    HAS TYPE is generated by the factory methods!
    HAS PART (DiscourseElement) has both direct and inverted logic implemented! Have a look below for more info.
    Chill down, everything seems OK here!
"""


class DiscourseElement(BibliographicEntity):
    """Discourse element (short: de): a document component, either structural (e.g.
       paragraph, section, chapter, table, caption, footnote, title) or rhetorical (e.g.
       introduction, discussion, acknowledgements, reference list, figure, appendix), in which
       the content of a bibliographic resource can be organized."""

    # HAS TITLE
    # <self.res> DCTERMS:title "string"
    def create_title(self, string: str) -> bool:
        """The title of the discourse element, such as the title of a figure or a section in an article.
        """
        self.remove_title()
        return self._create_literal(GraphEntity.title, string)

    def remove_title(self) -> None:
        self.g.remove((self.res, GraphEntity.title, None))
    
    # HAS PART (DiscourseElement)
    # <self.res> FRBR:part <de_res>
    def contains_discourse_element(self, de_res: DiscourseElement) -> None:
        """The discourse element hierarchically nested within the parent element, such as a
        sentence within a paragraph, or a paragraph within a section.
        """
        self.g.add((self.res, GraphEntity.contains_de, URIRef(str(de_res))))

    def remove_contained_de(self, de_res: DiscourseElement = None) -> None:
        if de_res is not None:
            self.g.remove((self.res, GraphEntity.contains_de, de_res.res))
        else:
            self.g.remove((self.res, GraphEntity.contains_de, None))

    """
         HAS PART (DiscourseElement) with inverted logic (IS PART OF)
    """
    # <de_res> FRBR:part <self.res>
    def contained_in_discourse_element(self, de_res: DiscourseElement) -> None:
        """The discourse element hierarchically nested within the parent element, such as a
        sentence within a paragraph, or a paragraph within a section.
        """
        self.g.add((URIRef(str(de_res)), GraphEntity.contains_de, self.res))

    # HAS NEXT (DiscourseElement)
    # <self.res> OCO:hasNext <de_res>
    def has_next_de(self, de_res: DiscourseElement) -> None:
        """The following discourse element that includes at least one in-text reference pointer.
        """
        self.remove_next_de()
        self.g.add((self.res, GraphEntity.has_next, URIRef(str(de_res))))

    def remove_next_de(self) -> None:
        self.g.remove((self.res, GraphEntity.has_next, None))

    # IS CONTEXT OF (ReferencePointer or PointerList)
    # <self.res> C4O:isContextOf <de_res>
    # TODO: Invece di usare typings.Union si potrebbero creare due metodi diversi
    #       (uno per ReferencePointer e uno per PointerList), ovvero is_context_of_rp e is_context_of_pl
    def is_context_of_rp_or_pl(self, rp_or_pl_res: Union[ReferencePointer, PointerList]) -> None:
        """Provides the textual and semantic context of the in-text reference pointer or list of
        in-text reference pointers that appears within the discourse element.
        """
        self.g.add((self.res, GraphEntity.is_context_of, URIRef(str(rp_or_pl_res))))

    def remove_context_of_rp_or_pl(self, rp_or_pl_res: Union[ReferencePointer, PointerList] = None) -> None:
        if rp_or_pl_res is not None:
            self.g.remove((self.res, GraphEntity.is_context_of, rp_or_pl_res.res))
        else:
            self.g.remove((self.res, GraphEntity.is_context_of, None))

    # HAS CONTENT
    # <self.res> C4O:hasContent "string"
    def create_content(self, string: str) -> bool:
        """The literal document text contained by the discourse element.
        """
        self.remove_content()
        return self._create_literal(GraphEntity.has_content, string)

    def remove_content(self) -> None:
        self.g.remove((self.res, GraphEntity.has_content, None))

    # HAS NUMBER
    # <self.res> FABIO:hasSequenceIdentifier "string"
    def create_number(self, string: str) -> bool:
        self.remove_number()
        return self._create_literal(GraphEntity.has_sequence_identifier, string)

    def remove_number(self) -> None:
        self.g.remove((self.res, GraphEntity.has_sequence_identifier, None))

    # ++++++++++++++++++++++++ FACTORY METHODS ++++++++++++++++++++++++
    # <self.res> RDF:type <type>

    def create_discourse_element(self, de_class: URIRef) -> None:
        """The type of discourse element – such as “paragraph”, “section”, “sentence”,
        “acknowledgements”, “reference list” or “figure”.
        """
        if de_class is not None:
            self._create_type(de_class)
        else:
            self._create_type(GraphEntity.discourse_element)

    def create_section(self) -> None:
        """The type of discourse element – such as “paragraph”, “section”, “sentence”,
        “acknowledgements”, “reference list” or “figure”.
        """
        self._create_type(GraphEntity.section)

    def create_section_title(self) -> None:
        """The type of discourse element – such as “paragraph”, “section”, “sentence”,
        “acknowledgements”, “reference list” or “figure”.
        """
        self._create_type(GraphEntity.section_title)

    def create_paragraph(self) -> None:
        """The type of discourse element – such as “paragraph”, “section”, “sentence”,
        “acknowledgements”, “reference list” or “figure”.
        """
        self._create_type(GraphEntity.paragraph)

    def create_sentence(self) -> None:
        """The type of discourse element – such as “paragraph”, “section”, “sentence”,
        “acknowledgements”, “reference list” or “figure”.
        """
        self._create_type(GraphEntity.sentence)

    def create_text_chunk(self) -> None:
        """The type of discourse element – such as “paragraph”, “section”, “sentence”,
        “acknowledgements”, “reference list” or “figure”.
        """
        self._create_type(GraphEntity.text_chunk)

    def create_table(self) -> None:
        """The type of discourse element – such as “paragraph”, “section”, “sentence”,
        “acknowledgements”, “reference list” or “figure”.
        """
        self._create_type(GraphEntity.table)

    def create_footnote(self) -> None:
        """The type of discourse element – such as “paragraph”, “section”, “sentence”,
        “acknowledgements”, “reference list” or “figure”.
        """
        self._create_type(GraphEntity.footnote)

    def create_caption(self) -> None:
        """The type of discourse element – such as “paragraph”, “section”, “sentence”,
        “acknowledgements”, “reference list” or “figure”.
        """
        self._create_type(GraphEntity.caption)

    def remove_type(self, type_ref: URIRef = None) -> None:
        if type_ref is not None:
            self.g.remove((self.res, RDF.type, type_ref))
        else:
            self.g.remove((self.res, RDF.type, None))
