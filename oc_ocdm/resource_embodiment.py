#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (c) 2016, Silvio Peroni <essepuntato@gmail.com>
#
# Permission to use, copy, modify, and/or distribute this software for any purpose
# with or without fee is hereby granted, provided that the above copyright notice
# and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT,
# OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
# DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
# ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
# SOFTWARE.
from __future__ import annotations
import re

from rdflib import URIRef

from oc_ocdm.graph_entity import GraphEntity
from oc_ocdm.bibliographic_entity import BibliographicEntity

"""
Notes about RE:

    HAS TYPE is generated by the factory methods!
    Chill down, everything seems OK here!
"""


class ResourceEmbodiment(BibliographicEntity):
    """Resource embodiment (short: re): the particular physical or digital format in which a
       bibliographic resource was made available by its publisher."""

    # HAS FORMAT
    # <self.res> DCTERMS:format <thing_ref>
    def has_media_type(self, thing_ref: URIRef) -> None:
        """It allows one to specify the IANA media type of the embodiment.
        """
        self.g.add((self.res, GraphEntity.has_format, thing_ref))

    # HAS FIRST PAGE
    # <self.res> PRISM:startingPage "string"
    def create_starting_page(self, string: str) -> bool:
        """The first page of the bibliographic resource according to the current embodiment.
        """
        if re.search("[-–]+", string) is None:
            page_number = string
        else:
            page_number = re.sub("[-–]+.*$", "", string)
        return self._create_literal(GraphEntity.starting_page, page_number)

    # HAS LAST PAGE
    # <self.res> PRISM:endingPage "string"
    def create_ending_page(self, string: str) -> bool:
        """The last page of the bibliographic resource according to the current embodiment.
        """
        if re.search("[-–]+", string) is None:
            page_number = string
        else:
            page_number = re.sub("^.*[-–]+", "", string)
        return self._create_literal(GraphEntity.ending_page, page_number)

    # HAS URL
    # <self.res> FRBR:exemplar <thing_ref>
    def has_url(self, thing_ref: URIRef) -> None:
        """The URL at which the embodiment of the bibliographic resource is available.
        """
        self.g.add((self.res, GraphEntity.has_url, thing_ref))

    # ++++++++++++++++++++++++ FACTORY METHODS ++++++++++++++++++++++++
    # <self.res> RDF:type <type>

    def create_digital_embodiment(self) -> None:
        """It identifies the particular type of the embodiment, either digital or print.
        """
        self._create_type(GraphEntity.digital_manifestation)

    def create_print_embodiment(self) -> None:
        """It identifies the particular type of the embodiment, either digital or print.
        """
        self._create_type(GraphEntity.print_object)
